.IFJcode22
JUMP $main

#ZACALA FUNKCIA READI !
LABEL $readi
CREATEFRAME
PUSHFRAME
DEFVAR LF@error
DEFVAR LF@read_int
DEFVAR LF@return_int
READ LF@read_int int
TYPE LF@error LF@read_int
JUMPIFNEQ $error_read string@int LF@error
MOVE LF@return_int LF@read_int
PUSHS LF@return_int
POPFRAME
RETURN
LABEL $error_read
MOVE LF@return_int nil@nil
PUSHS LF@return_int
POPFRAME
RETURN

#ZACALA FUNKCIA WRITE !
LABEL $write
CREATEFRAME
PUSHFRAME
DEFVAR LF@tmp
DEFVAR LF@type_of_tmp
DEFVAR LF@num_of_cycles
POPS LF@num_of_cycles
LABEL $while_write
JUMPIFEQ $while_end LF@num_of_cycles int@0
POPS LF@tmp
TYPE LF@type_of_tmp LF@tmp
JUMPIFEQ $writenull LF@type_of_tmp string@nil
WRITE LF@tmp
SUB LF@num_of_cycles LF@num_of_cycles int@1
JUMP $while_write
POPFRAME
RETURN
LABEL $writenull
WRITE nil@nil
SUB LF@num_of_cycles LF@num_of_cycles int@1
JUMP $while_write
LABEL $while_end
POPFRAME
RETURN

#ZACALA NOVA FUNKCIA !!!!!
LABEL $f
CREATEFRAME
PUSHFRAME
DEFVAR LF@IF_STMT
DEFVAR LF@IF_LEFT_EXPR
DEFVAR LF@IF_RIGHT_EXPR
DEFVAR LF@WHILE_STMT
DEFVAR LF@WHILE_LEFT_EXPR
DEFVAR LF@WHILE_RIGHT_EXPR
DEFVAR LF@INT2FLOATVAR
DEFVAR LF@FUNC_RETURNED_ME_A_VAR_THANK_YOU_FUNC
DEFVAR LF@IM_FUNCTION_AND_I_RETURN_THIS
DEFVAR LF@ONLY_FOR_GREATER_EQUAL
DEFVAR LF@ONLY_FOR_LESS_EQUAL
DEFVAR LF@y
DEFVAR LF@x
POPS LF@x
MOVE LF@IF_LEFT_EXPR LF@x
MOVE LF@IF_RIGHT_EXPR int@2
MOVE LF@IF_STMT LF@IF_LEFT_EXPR
GT LF@ONLY_FOR_GREATER_EQUAL LF@IF_STMT LF@IF_RIGHT_EXPR
JUMPIFEQ $gt_successful_0 LF@ONLY_FOR_GREATER_EQUAL bool@true
EQ LF@ONLY_FOR_GREATER_EQUAL LF@IF_STMT LF@IF_RIGHT_EXPR
LABEL $gt_successful_0
MOVE LF@IF_STMT LF@ONLY_FOR_GREATER_EQUAL
JUMPIFNEQ $else_1 LF@IF_STMT bool@true
MOVE LF@y LF@x
ADD LF@y LF@y int@1
PUSHS LF@y
PUSHS int@1
CALL $write
JUMP $else_end_2
LABEL $else_1
PUSHS string@Smaller\032than\032two!\010
PUSHS int@1
CALL $write
LABEL $else_end_2
MOVE LF@y LF@x
LABEL $while_cycle_3
MOVE LF@WHILE_LEFT_EXPR LF@y
MOVE LF@WHILE_RIGHT_EXPR int@6
MOVE LF@WHILE_STMT LF@WHILE_LEFT_EXPR
LT LF@ONLY_FOR_LESS_EQUAL LF@WHILE_STMT LF@WHILE_RIGHT_EXPR
JUMPIFEQ $lt_successful_5 LF@ONLY_FOR_LESS_EQUAL bool@true
EQ LF@ONLY_FOR_LESS_EQUAL LF@WHILE_STMT LF@WHILE_RIGHT_EXPR
LABEL $lt_successful_5
MOVE LF@WHILE_STMT LF@ONLY_FOR_LESS_EQUAL
JUMPIFNEQ $while_end_4 LF@WHILE_STMT bool@true
MOVE LF@y LF@y
ADD LF@y LF@y int@1
PUSHS LF@y
PUSHS int@1
CALL $write
JUMP $while_cycle_3
LABEL $while_end_4
DEFVAR LF@return
MOVE LF@return nil@nil
PUSHS LF@return
POPFRAME
RETURN

LABEL $main
CREATEFRAME
PUSHFRAME
DEFVAR LF@FUNC_RETURNED_ME_A_VAR_THANK_YOU_FUNC
DEFVAR LF@IF_STMT
DEFVAR LF@IF_LEFT_EXPR
DEFVAR LF@IF_RIGHT_EXPR
DEFVAR LF@WHILE_STMT
DEFVAR LF@WHILE_LEFT_EXPR
DEFVAR LF@WHILE_RIGHT_EXPR
DEFVAR LF@INT2FLOATVAR
DEFVAR LF@ONLY_FOR_GREATER_EQUAL
DEFVAR LF@ONLY_FOR_LESS_EQUAL
DEFVAR LF@x
CALL $readi
POPS LF@FUNC_RETURNED_ME_A_VAR_THANK_YOU_FUNC
MOVE LF@x LF@FUNC_RETURNED_ME_A_VAR_THANK_YOU_FUNC
PUSHS LF@x
CALL $f
LABEL $main_end